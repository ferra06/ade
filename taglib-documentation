
html:text>: utilizado para mostrar cajas de texto, de una sola linea. 

	Importar : <%@ taglib uri="http://jakarta.apache.org/struts/tags-html" prefix="html"%>

	property : Aqui se indica la entidad, es decir, la instancia de la clase con la cual se esta trabajando, esto se coloca de la siguiente manera: 
		   'entity.<metodo>' en el caso de un AbmAction. Si este fuese un ProcessAction, deberia de ser reemplazado por 'process.<metodo>'.
	maxlength: Indica la cantidad maxima de caracteres que se permiten ingresar.
	size	 : Tamano del control en pantalla.
	disabled : Desactiva el control. No recomendado. Utilice en su lugar readonly.
	readonly : Vuelve al control de solo lectura.
	styleId	 : Utilizado para asignar un ID al control.
	value	 : Utilizado para asignar un valor al control.

<html:hidden>: utilizado cuando se requiere que cierta información este presente en la pagina pero que no sea visible para el usuario. 

	property : Aqui se indica la entidad, es decir, la instancia de la clase con la cual se esta trabajando, esto se coloca de la siguiente manera: 
		   'entity.<metodo>' en el caso de un AbmAction. Si este fuese un ProcessAction, deberia de ser reemplazado por 'process.<metodo>'.
	value	 : Utilizado para asignar un valor al control.

<html:textarea>: utilizado para mostrar cajas de texto multilinea.

	property : Aqui se indica la entidad, es decir, la instancia de la clase con la cual se esta trabajando, esto se coloca de la siguiente manera: 
		   'entity.<metodo>' en el caso de un AbmAction. Si este fuese un ProcessAction, deberia de ser reemplazado por 'process.<metodo>'.
	cols	 : Determina el numero de columnas que son visibles al mismo tiempo. Por convención se debera de poner este valor a 40.
	rows	 : Determina el numero de filas visibles, por convención se debera de poner este valor a 4.
	readonly : Vuelve al control de solo lectura.
	styleId	 : Utilizado para asignar un ID al control.
	value	 : Utilizado para asignar un valor al control.

<logic:present>: Utilizado para tomar decisiones dependiendo de ciertas condiciones. Para utilizarlo es necesario incluir: 

	Importar : <%@ taglib uri="http://jakarta.apache.org/struts/tags-logic" prefix="logic"%>

	parameter: Utilizado para determinar si en la URL esta presente el valor indicado por este.

<logic:notPresent>: Se utiliza de la misma forma que el anterior, pero con este se evalua la condición opuesta.


<logic:empty>: Utilizado para saber, si una determinada propiedad es nula o no.

	parameter : Utilizado para determinar el parametro a evaluar.

<logic:notEmpty>: Se utiliza de la misma forma que el anterior, pero con este se evalua la condición opuesta.


<logic:equal>: Utilizado para realizar comparaciones.

	parameter: Utilizado para determinar el parametro a evaluar.
	property : Aqui se indica la entidad, es decir, la instancia de la clase con la cual se esta trabajando, esto se coloca de la siguiente manera: 'entity.<metodo>' 
	value	 : El valor contra el cual se comparara la expresión.

<logic:notEqual>: Se utiliza de la misma forma que el anterior, pero con este se evalua la condición opuesta.


<bean:define>: Esto define un objeto el cual tendra getters y setters. Para utilizarlo, es necesario que se incluya: 

	Importar : <%@ taglib uri="http://jakarta.apache.org/struts/tags-bean" prefix="bean"%>

	id	 : Define un identificador unico para el objeto.
	name	 : Asigna un nombre al objeto.
	scope	 : Define la visibilidad del objeto, por convención se utiliza con el valor 'session'.
	type	 : Indica el tipo de datos que va a manejar. Valores posibles son: Object[] para filtros y el que sea necesario para el resto de los casos, ejemplos Long, String, etc.


<bean:write>: Utilizado para escribir datos provenientes de un origen de datos o un bean, en la pagina.

	name	 : Nombre del bean, el cual contiene la información que queremos mostrar por pantalla.
	property : Propiedad del bean, que queremos imprimir en pantalla.


<display:table>: Este se utiliza en los LIST para mostrar el contenido de los objetos en forma de tablas. Para utilizarlo es necesario incluir: 

	Importar : <%@ taglib uri="/WEB-INF/displaytag-12.tld" prefix="display"%>

	name	 : Permite asignarle un nombre a la tabla. Segun el manual, 'referencia al objeto usado como fuente para la tabla.'
	export  : Activa o desactiva la exportación, valores posibles true/false.
	id	 : Se asigna un identificador unico para el objeto.
	requestURI:Los link para ordenar, exportar y paginar, son formados agregandoles el valor de esta propiedad.
	property :


<display:setProperty>: Sirve para setear valores a las propiedades del displayTable.

	name	 : Nombre de la propiedad a setear.
	value	 : Valor a asignar.

<display:column>: Representa una columna.

	property : Atributo, o columna, de la Base de Datos de la cual se obtendran los datos a mostrar.
	title	 : Titulo a visualizar en la pagina.
	href	 : Base estatica para construir los links dinamicos.
	paramId	 : El nombre del parametro de respuesta que sera dinamicamente agregado al href generado. El valor correspondiente, lo define el paramProperty o en su defecto el paramName.
	paramProperty : El nombre de la propiedad del actual objeto que esta siendo iterado, el cual devolvera un valor que 
	                sera usado como valor del parametro especificado con el atributo paramId.
	sorteable: Indica si la columna podra ser ordenada o no.
	media	 : Indica el medio (pdf, html, excel, xml), en el cual la columna sera renderizada. Es una lista separada por espacios.
	sortProperty: Indica por la propiedad que sera ordenada la columna.
	honClick : Implementación del evento onClic.



Tag Creados por Aconcagua Software Factory (ASF).

Para poder utilizarlos se debera de incluir: <%@ taglib uri="/WEB-INF/asf-taglib.tld" prefix="asf"%>

<asf:calentar>: Utilizado para mostrar un calendario.
	property : Aqui se indica la entidad, es decir, la instancia de la clase con la cual se esta trabajando, esto se coloca de la siguiente manera: 'entity.<metodo>' en el caso de un 		           AbmAction. Si este fuese un ProcessAction, deberia de ser reemplazado por 'process.<metodo>'.
	readonly : Vuelve al control de solo lectura.
	toolTips : Especifica ayuda extra para el usuario. Esta es visualizada cuando se coloca el puntero del mouse sobre el control.
	maxlength: Indica la cantidad maxima de caracteres a ingresar.

	Al pie de cada pagina que utilice este control, se debera de incluir, una sola vez, el siguiente código:

<iframe width=174 height=189 name="gToday:normal:agenda.js" id="gToday:normal:agenda.js" src="${pageContext.request.contextPath}/calendar/ipopeng.htm" scrolling="no" frameborder="0" style="visibility:visible; z-index:999; position:absolute; top:-500px; left:-500px;"></iframe>

	Este código es el encargado de mostrar el frame que contiene el calendario.


<asf:select>: Este es un combo, el cual toma los datos que muestra desde un objeto.

	enabled	   : Desactiva el control. Cuando se lo utiliza, el control deja de llamar a los setters y getters correspondientes, esto es debido a que el control se desactiva. 
                     Por ello es necesario que se incluya un hidden con el mismo valor en la propiedad 'property'.
	name	   : Nombre del control.
	value	   : Valor que toma el control cuando se carga.
	entityName : Entidad (objeto) de la cual obtiene los datos.
	listValues : El valor que identifica a un registro de forma univoca en la Base de Datos. Hay que separarlos por comas, aqui van los getters.
	listCaption: Lista de valores que se mostraran en el control. Hay que separarlos por comas, aqui van los getters.
	filter	   : Expresión SQL correspondiente al WHERE de la consulta con la que se carga el combo.
	nullText   : Valor que tomara el caption para representar un valor nulo.
	nullValue  : Valores permitidos true/false. Si no se especifica nullText, el caption tomara el valor 'Null'
	attribs	   : Utilizado para especificar cualquier otro comportamiento. Por ej. la respuesta a un evento determinado.
	toolTips   : Especifica ayuda extra para el usuario. Esta es visualizada cuando se coloca el puntero del mouse sobre el control.
	class	   :
	limit 	   :
	style	   :

<asf:selectpop>: Este abre una ventana emergente (pop-up) en la cual se pueden realizar busquedas.

	name	  : Este es el nombre del control. Por convención es 'paramValue[0]'.
	columns	  : Este es un caption que se mostrara en el pop-up.
	captions  : Estos son los getters, desde donde se obtendra la información necesaria. Van separados por comas.
	entityName: Entidad (objeto) de la cual obtiene los datos.
	value	  : Valor que toma el control cuando se carga.
	attribs	  : Utilizado para especificar cualquier otro comportamiento. Por ej. la respuesta a un evento determinado.
	enabled	  : Desactiva el control.
	title	  :
	values	  :


<asf:lselect>: Este es un combo linkeado.

	entityName : Entidad (objeto) de la cual obtiene los datos.
	listValue  : El valor que identifica a un registro de forma univoca en la Base de Datos. Hay que separarlos por comas, aqui van los getters.
	listCaption: Lista de valores que se mostraran en el control. Hay que separarlos por comas, aqui van los getters.
	enabled	   : Activa o desactiva el control.
	property   :
	value:
	linkFK:
	linkName:
	attribs:
	filter:
	form:
	htmlClass:
	linkForm:
	style:


<asf:menu>:
	
	idmodulo:





<html:form action="/actions/abmAction.do?entityName=${param.entityName}&filter=true">
<b>Legajo:</b>
<asfgrh:legajopopup property="paramValue[0]" value="${paramValue[0]}"/><br>
<html:hidden property="paramName[0]" styleId="paramName" value="lega12" />
<html:hidden property="paramComp[0]" styleId="paramComp" value="="/>
<html:hidden property="filter" value="true"/>
<html:hidden property="do" styleId="do" value="list"/>
<html:submit onclick="getElem('do').value='newEntity';"><bean:message key="abm.button.new"/></html:submit>
<html:submit onclick="getElem('do').value='list';">Consultar</html:submit>
</html:form>


